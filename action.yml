name: 'Swift App Pipeline Action'
description: 'Automate Swift app development with linting, testing, building, and releasing for macOS. All-in-one CI/CD solution.'
author: 'Arnab Banerjee'
branding:
  icon: 'box'
  color: 'red'
inputs:
  provisioning-profile-specifier:
    description: 'Name of the provisioning profile to use'
    required: false
  team-id:
    description: 'Apple Developer Team ID'
    required: false
  xcode-version:
    description: 'Xcode version to use'
    required: false
    default: 'latest'
  code-sign-identity:
    description: 'Code signing identity to use'
    required: false
  macos-version:
    description: 'macOS version to use'
    required: false
    default: 'latest'
  project-name:
    description: 'Name of the Xcode project file (without .xcodeproj extension)'
    required: true
  scheme-name:
    description: 'Name of the Xcode scheme to use'
    required: true
  app-name:
    description: 'Name of the app (used for artifact naming)'
    required: false
  run-lint:
    description: 'Whether to run SwiftLint'
    required: false
    default: 'true'
  run-tests:
    description: 'Whether to run tests'
    required: false
    default: 'true'
  run-build:
    description: 'Whether to build the app'
    required: false
    default: 'true'
  create-release:
    description: 'Whether to create a GitHub release'
    required: false
    default: 'false'
  sign-app:
    description: 'Whether to sign the app'
    required: false
    default: 'false'
  keychain-password:
    description: 'Password for the keychain'
    required: false
  p12-base64:
    description: 'Base64-encoded P12 file with certificates'
    required: false
  p12-password:
    description: 'Password for the P12 file'
    required: false
  provisioning-profile-base64:
    description: 'Base64-encoded provisioning profile'
    required: false
  ignore-step-failure:
    description: 'Whether to continue the pipeline if a step fails'
    required: false
    default: 'false'
  increment-build-version:
    description: 'Whether to increment the build version'
    required: false
    default: 'true'
  build-version-increment:
    description: 'Custom build version increment (if not using git commit count)'
    required: false
    default: ''
  custom-version:
    description: 'Custom version string to set (overrides increment)'
    required: false
  remove-quarantine:
    description: 'Whether to remove quarantine from the built app'
    required: false
    default: 'true'
  comment-on-pr:
    description: 'Whether to comment on the PR with release info'
    required: false
    default: 'false'
  pr-comment-template:
    description: 'Template for PR comment'
    required: false
    default: 'New build available: {release-url}'
  create-dmg:
    description: 'Whether to create a DMG instead of ZIP'
    required: false
    default: 'false'
  dmg-background:
    description: 'Path to DMG background image'
    required: false
    default: ''
  dmg-window-size:
    description: 'Size of the DMG window (width x height)'
    required: false
    default: '600x400'
  dmg-icon-size:
    description: 'Size of icons in the DMG'
    required: false
    default: '128'
  github-token:
    description: 'GitHub token for creating releases and commenting on PRs'
    required: true
  enable-notarization:
    description: 'Whether to notarize the app'
    required: false
    default: 'false'
  apple-id:
    description: 'Apple ID for notarization'
    required: false
  apple-password:
    description: 'App-specific password for Apple ID'
    required: false
  keychain-profile:
    description: 'Keychain profile for notarization'
    required: false
    default: 'notary'
  staple:
    description: 'Whether to staple the notarization ticket to the app'
    required: false
    default: 'true'
  ignore-notarization-failure:
    description: 'Whether to continue the pipeline if notarization fails'
    required: false
    default: 'false'

outputs:
  build-number:
    description: 'The build number used for this run'
  version:
    description: 'The version string used for this run'
  artifact-path:
    description: 'Path to the built artifact (app bundle, ZIP, or DMG)'
runs:
  using: 'composite'
  steps:
    - name: Make scripts executable
      shell: bash
      run: chmod +x ${{ github.action_path }}/scripts/*.sh

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ inputs.xcode-version }}

    - name: Import Code-Signing Certificates
      if: inputs.sign-app == 'true'
      uses: Apple-Actions/import-codesign-certs@v3
      with:
        p12-file-base64: ${{ inputs.p12-base64 }}
        p12-password: ${{ inputs.p12-password }}
        keychain-password: ${{ inputs.keychain-password }}

    - name: Install Provisioning Profile
      if: inputs.sign-app == 'true'
      shell: bash
      env:
        PROVISIONING_PROFILE_BASE64: ${{ inputs.provisioning-profile-base64 }}
      run: |
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PP_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        echo "Provisioning profile installed at: $PP_PATH"
        echo "Listing installed profiles:"
        ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
        echo "Profile contents:"
        security cms -D -i $PP_PATH

    - name: Verify Certificate
      if: inputs.sign-app == 'true'
      shell: bash
      run: |
        security find-identity -v -p codesigning

    - name: Examine Provisioning Profile
      if: inputs.sign-app == 'true'
      shell: bash
      run: |
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

    - name: Examine Xcode Project
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
      run: |
        xcodebuild -project $INPUT_PROJECT_NAME.xcodeproj -scheme $INPUT_SCHEME_NAME -showBuildSettings
        
    - name: Run SwiftLint
      if: inputs.run-lint == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_RUN_LINT: ${{ inputs.run-lint }}
      run: ${{ github.action_path }}/scripts/lint.sh

    - name: Run tests
      if: inputs.run-tests == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
        INPUT_RUN_TESTS: ${{ inputs.run-tests }}
      run: ${{ github.action_path }}/scripts/test.sh

    - name: Increment version
      if: inputs.increment-build-version == 'true'
      shell: bash
      id: increment-version
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_INCREMENT_BUILD_VERSION: ${{ inputs.increment-build-version }}
        INPUT_BUILD_VERSION_INCREMENT: ${{ inputs.build-version-increment }}
        INPUT_CUSTOM_VERSION: ${{ inputs.custom-version }}
      run: ${{ github.action_path }}/scripts/increment-version.sh

    - name: Set Xcode Path
      run: |
        XCODE_PATH=$(dirname $(dirname $(xcode-select -p)))
        echo "XCODE_PATH=$XCODE_PATH" >> $GITHUB_ENV
      shell: bash

    - name: Build App
      if: inputs.run-build == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
        INPUT_RUN_BUILD: ${{ inputs.run-build }}
        INPUT_REMOVE_QUARANTINE: ${{ inputs.remove-quarantine }}
        INPUT_APP_NAME: ${{ inputs.app-name != '' && inputs.app-name || inputs.project-name }}
        INPUT_SIGN_APP: ${{ inputs.sign-app }}
        INPUT_TEAM_ID: ${{ inputs.team-id }}
        INPUT_PROVISIONING_PROFILE_SPECIFIER: ${{ inputs.provisioning-profile-specifier }}
        BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
        DEVELOPER_DIR: ${{ env.XCODE_PATH }}
      run: ${{ github.action_path }}/scripts/build.sh

    - name: Sign App
      if: inputs.sign-app == 'true'
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_SCHEME_NAME: ${{ inputs.scheme-name }}
      run: ${{ github.action_path }}/scripts/sign.sh

    - name: Archive App
      shell: bash
      env:
        INPUT_PROJECT_NAME: ${{ inputs.project-name }}
        INPUT_APP_NAME: ${{ inputs.app-name }}
        INPUT_CREATE_DMG: ${{ inputs.create-dmg }}
        INPUT_DMG_BACKGROUND: ${{ inputs.dmg-background }}
        BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
      id: archive
      run: ${{ github.action_path }}/scripts/archive.sh

    - name: Notarize App
      if: inputs.enable-notarization == 'true' && inputs.sign-app == 'true'
      shell: bash
      env:
        INPUT_KEYCHAIN_PROFILE: ${{ inputs.keychain-profile }}
        INPUT_APPLE_ID: ${{ inputs.apple-id }}
        INPUT_APPLE_PASSWORD: ${{ inputs.apple-password }}
        INPUT_TEAM_ID: ${{ inputs.team-id }}
        INPUT_STAPLE: ${{ inputs.staple }}
        INPUT_ARCHIVE_PATH: ${{ steps.archive.outputs.archive-path }}
      run: |
        if ! ${{ github.action_path }}/scripts/notarize.sh; then
          echo "::warning::Notarization failed. Check the logs for more information."
          if [[ "${{ inputs.ignore-notarization-failure }}" != "true" ]]; then
            exit 1
          fi
        fi

    - name: Create Release
      if: inputs.create-release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.archive.outputs.archive-path }}
        name: ${{ inputs.app-name }} v${{ steps.increment-version.outputs.build-number }}
        tag_name: v${{ steps.increment-version.outputs.build-number }}
        body: "Automated release for ${{ inputs.app-name }} App"
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

        
    - name: Comment on PR
      if: inputs.comment-on-pr == 'true'
      shell: bash
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_COMMENT_ON_PR: ${{ inputs.comment-on-pr }}
        INPUT_CREATE_DMG: ${{ inputs.create-dmg }}
        INPUT_ARTIFACT_PATH: ${{ steps.create-release.outputs.artifact-path }}
        INPUT_BUILD_NUMBER: ${{ steps.increment-version.outputs.build-number }}
        INPUT_APP_NAME: ${{ inputs.app-name != '' && inputs.app-name || inputs.project-name }}
        INPUT_PR_COMMENT_TEMPLATE: ${{ inputs.pr-comment-template }}
      run: ${{ github.action_path }}/scripts/comment-pr.sh
